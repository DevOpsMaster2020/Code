DECLARE @SQLStatement VARCHAR(4000) 
DECLARE @T_DBuser TABLE (DBName SYSNAME, UserName SYSNAME, AssociatedDBRole NVARCHAR(256)) 
SET @SQLStatement='
SELECT ''?'' AS DBName,dp.name AS UserName,USER_NAME(drm.role_principal_id) AS AssociatedDBRole 
FROM ?.sys.database_principals dp
LEFT OUTER JOIN ?.sys.database_role_members drm
ON dp.principal_id=drm.member_principal_id 
WHERE dp.sid NOT IN (0x01) AND dp.sid IS NOT NULL AND dp.type NOT IN (''C'') AND dp.is_fixed_role <> 1 AND dp.name NOT LIKE ''##%'' AND ''?'' NOT IN (''master'',''msdb'',''model'',''tempdb'') 

ORDER BY DBName'
INSERT @T_DBuser
EXEC sp_MSforeachdb @SQLStatement
--SELECT DBname, UserName, AssociatedDBRole FROM @T_DBuser ORDER BY DBName

 
SELECT *
FROM (
   SELECT DBname, UserName, AssociatedDBRole FROM @T_DBuser)
   t
   PIVOT
   (
   max(AssociatedDBRole)
   FOR DBname IN
   (
   
  [master]
   
   )
      
   ) AS pivot_table


=========================
-- Drop if it already exists
IF OBJECT_ID('tempdb..#RoleAudit') IS NOT NULL DROP TABLE #RoleAudit;

CREATE TABLE #RoleAudit (
    DatabaseName SYSNAME,
    RoleName SYSNAME,
    MemberName SYSNAME,
    MemberType NVARCHAR(60),
    EffectiveRole SYSNAME,
    PermissionName NVARCHAR(100),
    PermissionState NVARCHAR(60),
    ObjectName NVARCHAR(260)
);

DECLARE @dbName SYSNAME;
DECLARE @sql NVARCHAR(MAX);

DECLARE db_cursor CURSOR FOR
SELECT name 
FROM sys.databases 
WHERE state_desc = 'ONLINE' 
  AND database_id > 4; -- Skip system DBs

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbName;

WHILE @@FETCH_STATUS = 0
BEGIN
    SET @sql = '
    USE [' + QUOTENAME(@dbName) + '];

    ;WITH RoleHierarchy AS (
        -- Anchor: Direct user->role
        SELECT 
            drm.member_principal_id AS MemberId,
            drm.role_principal_id AS RoleId,
            1 AS Level
        FROM sys.database_role_members drm

        UNION ALL

        -- Recursive: role->role (nested roles)
        SELECT 
            rh.MemberId,
            drm.role_principal_id,
            rh.Level + 1
        FROM RoleHierarchy rh
        JOIN sys.database_role_members drm ON rh.RoleId = drm.member_principal_id
    ),
    ResolvedRoles AS (
        SELECT 
            DB_NAME() AS DatabaseName,
            users.name AS MemberName,
            users.type_desc AS MemberType,
            roles.name AS RoleName
        FROM RoleHierarchy rh
        JOIN sys.database_principals users ON rh.MemberId = users.principal_id
        JOIN sys.database_principals roles ON rh.RoleId = roles.principal_id
        WHERE users.type IN (''S'', ''U'', ''G'') -- SQL user, Windows user, group
    )

    INSERT INTO #RoleAudit
    SELECT 
        rr.DatabaseName,
        rr.RoleName,
        rr.MemberName,
        rr.MemberType,
        fixed.name AS EffectiveRole,
        perm.permission_name,
        perm.state_desc,
        OBJECT_NAME(perm.major_id)
    FROM ResolvedRoles rr
    LEFT JOIN sys.database_role_members drm2 ON rr.RoleName = (
        SELECT name FROM sys.database_principals WHERE principal_id = drm2.member_principal_id
    )
    LEFT JOIN sys.database_principals fixed ON drm2.role_principal_id = fixed.principal_id
    LEFT JOIN sys.database_principals rp ON rp.name = rr.RoleName
    LEFT JOIN sys.database_permissions perm ON perm.grantee_principal_id = rp.principal_id;
    ';

    EXEC sp_executesql @sql;
    FETCH NEXT FROM db_cursor INTO @dbName;
END

CLOSE db_cursor;
DEALLOCATE db_cursor;

-- Output result
SELECT * 
FROM #RoleAudit
ORDER BY DatabaseName, MemberName, RoleName, EffectiveRole, PermissionName;


