# Configuration values (ensure these are properly assigned)
$SrcInstance = "source_server"
$SourceDB = "source_db_name"
$source_token_client = "your_token_endpoint"
$source_db_rw_service_account = "your_rw_service_account"
$source_db_rw_secret_path = "your_secret_path"

# Get Access Token
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$STokenResponse = Invoke-RestMethod -Uri $source_token_client -Headers @{"metadata"="true"} -Method GET
$accessToken = $STokenResponse.access_token

# Define query
$query = "SELECT loadDate AS last_load FROM t_xf_na_repl_load_date"

# Loop to check the date up to 7 times
$maxCount = 7
$count = 1
$success = $false

while ($count -le $maxCount) {
    try {
        $lastload = Invoke-Sqlcmd -Query $query -ServerInstance $SrcInstance -Database $SourceDB -AccessToken $accessToken
        $today = Get-Date -Format "yyyy/MM/dd"

        if ($lastload.last_load -eq $today) {
            Write-Host "Load is up to date, last load was: $($lastload.last_load)" -ForegroundColor Green
            exit 0
        } else {
            Write-Host "Load is NOT up to date, last load was: $($lastload.last_load)" -ForegroundColor Red
        }
    } catch {
        Write-Host "Error occurred: $_" -ForegroundColor Red
    }

    Start-Sleep -Seconds 60  # Optional: wait between retries
    $count++
}

Write-Host "Load check failed after $maxCount attempts." -ForegroundColor Red
exit 1


#Shell to call above

#!/bin/bash

# Run the PowerShell script
pwsh ./check_lastload.ps1

# Capture the exit code
exit_code=$?

if [ $exit_code -eq 0 ]; then
    echo "PowerShell script succeeded. Running next script..."
    ./run_next_job.sh
else
    echo "PowerShell script failed or load not up to date. Skipping next step."
fi

