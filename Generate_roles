DECLARE 
    @CreateUsers NVARCHAR(MAX) = '',
    @CreateRoles NVARCHAR(MAX) = '',
    @RoleMembership NVARCHAR(MAX) = '',
    @RoleGrants NVARCHAR(MAX) = '',
    @FinalScript NVARCHAR(MAX) = '';

-- 1. Create USERS and ROLES
SELECT
    @CreateUsers = STRING_AGG(
        CASE 
            WHEN type_desc = 'SQL_USER' THEN
                'IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N''' + name + ''')
BEGIN
    CREATE USER [' + name + '] FOR LOGIN [' + name + '];
END
'
            WHEN type_desc = 'EXTERNAL_USER' THEN
                'IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N''' + name + ''')
BEGIN
    CREATE USER [' + name + '] FROM EXTERNAL PROVIDER;
END
'
            WHEN type_desc = 'DATABASE_ROLE' THEN
                'IF NOT EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N''' + name + ''')
BEGIN
    CREATE ROLE [' + name + '];
END
'
            ELSE ''
        END, CHAR(13) + CHAR(10))
FROM sys.database_principals
WHERE name NOT IN ('dbo', 'guest', 'INFORMATION_SCHEMA', 'sys')
  AND type IN ('S', 'X', 'G', 'R') -- SQL, External, Windows, Roles
;

-- 2. Add users to roles
SELECT 
    @RoleMembership = STRING_AGG(
        'IF NOT EXISTS (
    SELECT 1 
    FROM sys.database_role_members rm
    JOIN sys.database_principals roles ON rm.role_principal_id = roles.principal_id
    JOIN sys.database_principals members ON rm.member_principal_id = members.principal_id
    WHERE roles.name = N''' + r.name + '''
      AND members.name = N''' + m.name + '''
)
BEGIN
    ALTER ROLE [' + r.name + '] ADD MEMBER [' + m.name + '];
END
', CHAR(13) + CHAR(10))
FROM sys.database_role_members rm
JOIN sys.database_principals r ON rm.role_principal_id = r.principal_id
JOIN sys.database_principals m ON rm.member_principal_id = m.principal_id
WHERE r.name NOT IN ('dbo', 'guest')
;

-- 3. Permissions granted to roles or users
SELECT 
    @RoleGrants = STRING_AGG(
        'IF NOT EXISTS (
    SELECT 1 
    FROM sys.database_permissions dp
    JOIN sys.database_principals dp_princ ON dp.grantee_principal_id = dp_princ.principal_id
    WHERE dp_princ.name = N''' + dp_princ.name + ''' 
      AND dp.permission_name = ''' + p.permission_name + ''' 
      AND OBJECT_NAME(p.major_id) = ''' + OBJECT_NAME(p.major_id) + '''
)
BEGIN
    GRANT ' + p.permission_name + 
    CASE 
        WHEN p.class_desc = 'OBJECT_OR_COLUMN' THEN 
            ' ON [' + OBJECT_NAME(p.major_id) + '] TO [' + dp_princ.name + '];'
        ELSE
            ' TO [' + dp_princ.name + '];'
    END + '
END
', CHAR(13) + CHAR(10))
FROM sys.database_permissions p
JOIN sys.database_principals dp_princ ON p.grantee_principal_id = dp_princ.principal_id
WHERE dp_princ.name NOT IN ('dbo', 'guest', 'public')
;

-- Combine all into final script
SET @FinalScript = 
'-- ==========================================
-- Rebuild Users, Roles, Memberships, Permissions
-- ==========================================

-- === Create Users and Roles ===
' + ISNULL(@CreateUsers, '') + '

-- === Add Members to Roles ===
' + ISNULL(@RoleMembership, '') + '

-- === Grant Permissions ===
' + ISNULL(@RoleGrants, '') + '
';

-- Output
PRINT @FinalScript;
-- SELECT @FinalScript AS [FullMigrationScript]; -- Use SELECT if too long
