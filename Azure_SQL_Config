param(
    [Parameter(Mandatory = $true)]
    [string]$SubscriptionId,

    [Parameter(Mandatory = $false)]
    [string]$OutputPath = "./AzureSqlConfig.xlsx"
)

# Ensure required modules are installed
function Ensure-Module {
    param([string]$Name)
    if (-not (Get-Module -ListAvailable -Name $Name)) {
        Write-Host "Module $Name not found. Installing..." -ForegroundColor Yellow
        Install-Module -Name $Name -Scope CurrentUser -Force
    }
}
Ensure-Module -Name Az
Ensure-Module -Name ImportExcel

# Connect and select subscription
Write-Host "Connecting to Azure and selecting subscription $SubscriptionId..." -ForegroundColor Cyan
Connect-AzAccount | Out-Null
Select-AzSubscription -SubscriptionId $SubscriptionId | Out-Null

# Collections
$serversOutput = @()
$fgOutput = @()
$dbOutput = @()

# Retrieve servers
$servers = Get-AzSqlServer
foreach ($server in $servers) {
    # Server details
    $serversOutput += [PSCustomObject]@{
        SubscriptionId       = $SubscriptionId
        ResourceGroup        = $server.ResourceGroupName
        ServerName           = $server.ServerName
        Location             = $server.Location
        Version              = $server.Version
        ProvisioningState    = $server.ProvisioningState
        UAMI                 = ($server.Identity.UserAssignedIdentities.Keys -join ",")
        SAMI                 = ($server.Identity.Type -eq 'SystemAssigned')
        ConnectionPolicy     = (Get-AzSqlServerConnectionPolicy -ResourceGroupName $server.ResourceGroupName -ServerName $server.ServerName).ConnectionType
    }

    # Failover groups
    try {
        $fogs = Get-AzSqlServerFailoverGroup -ResourceGroupName $server.ResourceGroupName -ServerName $server.ServerName -ErrorAction Stop
        foreach ($fg in $fogs) {
            $fgOutput += [PSCustomObject]@{
                ServerName           = $server.ServerName
                FailoverGroupName    = $fg.Name
                ReadWriteListener    = $fg.ReadWriteEndpoint.PrimaryRoleServerName
                ReadOnlyListener     = $fg.ReadOnlyEndpoint.EndpointUrl
                PrimarySecondary     = if ($fg.FailoverPolicy -eq 'Automatic') { 'Primary: ' + $fg.PrimaryServerName + '; Secondary: ' + $fg.PartnerServerName } else { $null }
                FailoverPolicy       = $fg.FailoverPolicy
                GracePeriodDays      = $fg.GracePeriodWithDataLossHours / 24
            }
        }
    } catch {}

    # Databases
    $dbs = Get-AzSqlDatabase -ResourceGroupName $server.ResourceGroupName -ServerName $server.ServerName
    foreach ($db in $dbs) {
        # Backup retention
        $ret = Get-AzSqlDatabaseBackupShortTermRetentionPolicy -ResourceGroupName $server.ResourceGroupName -ServerName $server.ServerName -DatabaseName $db.DatabaseName
        $dbOutput += [PSCustomObject]@{
            ServerName           = $server.ServerName
            DatabaseName         = $db.DatabaseName
            Edition              = $db.Edition
            ServiceObjective     = $db.CurrentServiceObjectiveName
            MaxSizeGB            = [math]::Round($db.MaxSizeBytes / 1GB, 2)
            Collation            = $db.Collation
            Status               = $db.Status
            CreationDate         = $db.CreationDate
            BackupRetentionDays  = $ret.RetentionDays
            ReplicationLinks     = ($(Get-AzSqlDatabaseReplicationLink -ResourceGroupName $server.ResourceGroupName -ServerName $server.ServerName -DatabaseName $db.DatabaseName -ErrorAction SilentlyContinue | %{
                                        $_.PartnerServer + ':' + $_.PartnerDatabase + ':' + $_.Role
                                      }) -join ';')
        }
    }
}

# Export to Excel with multiple sheets (fallback to CSV if desired)
if ($OutputPath -like '*.xlsx') {
    $serversOutput | Export-Excel -Path $OutputPath -WorksheetName 'Servers' -AutoSize
    $fgOutput      | Export-Excel -Path $OutputPath -WorksheetName 'FailoverGroups' -AutoSize -Append
    $dbOutput      | Export-Excel -Path $OutputPath -WorksheetName 'Databases' -AutoSize -Append
    Write-Host "Exported to Excel file: $OutputPath" -ForegroundColor Green
} else {
    $serversOutput | Export-Csv -Path "Servers.csv" -NoTypeInformation
    $fgOutput      | Export-Csv -Path "FailoverGroups.csv" -NoTypeInformation
    $dbOutput      | Export-Csv -Path "Databases.csv" -NoTypeInformation
    Write-Host "Exported to CSV files: Servers.csv, FailoverGroups.csv, Databases.csv" -ForegroundColor Green
}
